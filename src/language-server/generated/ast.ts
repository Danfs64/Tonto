/******************************************************************************
 * This file was generated by langium-cli 0.3.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
import { AstNode, AstReflection, Reference, isAstNode } from 'langium';

export type EndurantType = 'category' | 'collective' | 'kind' | 'mode' | 'phase' | 'quality' | 'role' | 'roleMixin' | 'subkind';

export type QualifiedName = string;

export interface Class extends Element {
    readonly $container: ContextModule;
    name: string
    references: EndurantReference
    specializationClass?: Reference<Class>
}

export const Class = 'Class';

export function isClass(item: unknown): item is Class {
    return reflection.isInstance(item, Class);
}

export interface ClassPrefix extends AstNode {
    readonly $container: Element;
    stereotype: Stereotype
}

export const ClassPrefix = 'ClassPrefix';

export function isClassPrefix(item: unknown): item is ClassPrefix {
    return reflection.isInstance(item, ClassPrefix);
}

export interface ContextModule extends AstNode {
    readonly $container: ModelElement;
    elements: Array<Element>
    name: QualifiedName
}

export const ContextModule = 'ContextModule';

export function isContextModule(item: unknown): item is ContextModule {
    return reflection.isInstance(item, ContextModule);
}

export interface Element extends AstNode {
    readonly $container: ContextModule;
    prefix: ClassPrefix
}

export const Element = 'Element';

export function isElement(item: unknown): item is Element {
    return reflection.isInstance(item, Element);
}

export interface Endurant extends AstNode {
    name: string
    specializationEndurant?: Reference<Endurant>
    type: EndurantType
}

export const Endurant = 'Endurant';

export function isEndurant(item: unknown): item is Endurant {
    return reflection.isInstance(item, Endurant);
}

export interface EndurantReference extends AstNode {
    readonly $container: Class | Relator;
    referencedClass: Reference<Class>
    refName: string
}

export const EndurantReference = 'EndurantReference';

export function isEndurantReference(item: unknown): item is EndurantReference {
    return reflection.isInstance(item, EndurantReference);
}

export interface Model extends AstNode {
    elements: Array<ModelElement>
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export interface ModelElement extends AstNode {
    readonly $container: Model;
    module: ContextModule
}

export const ModelElement = 'ModelElement';

export function isModelElement(item: unknown): item is ModelElement {
    return reflection.isInstance(item, ModelElement);
}

export interface Relator extends AstNode {
    name: string
    references: EndurantReference
}

export const Relator = 'Relator';

export function isRelator(item: unknown): item is Relator {
    return reflection.isInstance(item, Relator);
}

export interface Stereotype extends AstNode {
    readonly $container: ClassPrefix;
    stereotype: string
}

export const Stereotype = 'Stereotype';

export function isStereotype(item: unknown): item is Stereotype {
    return reflection.isInstance(item, Stereotype);
}

export type tontoAstType = 'Class' | 'ClassPrefix' | 'ContextModule' | 'Element' | 'Endurant' | 'EndurantReference' | 'Model' | 'ModelElement' | 'Relator' | 'Stereotype';

export type tontoAstReference = 'Class:specializationClass' | 'Endurant:specializationEndurant' | 'EndurantReference:referencedClass';

export class tontoAstReflection implements AstReflection {

    getAllTypes(): string[] {
        return ['Class', 'ClassPrefix', 'ContextModule', 'Element', 'Endurant', 'EndurantReference', 'Model', 'ModelElement', 'Relator', 'Stereotype'];
    }

    isInstance(node: unknown, type: string): boolean {
        return isAstNode(node) && this.isSubtype(node.$type, type);
    }

    isSubtype(subtype: string, supertype: string): boolean {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            case Class: {
                return this.isSubtype(Element, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(referenceId: tontoAstReference): string {
        switch (referenceId) {
            case 'Class:specializationClass': {
                return Class;
            }
            case 'Endurant:specializationEndurant': {
                return Endurant;
            }
            case 'EndurantReference:referencedClass': {
                return Class;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
}

export const reflection = new tontoAstReflection();
