import { TontoDescriptionProvider } from './tonto-index';
import { TontoNameProvider } from './tonto-naming';
import { TontoScopeComputation } from './tonto-scope';
import { createDefaultModule, createDefaultSharedModule, DefaultSharedModuleContext, inject, LangiumServices, LangiumSharedServices, Module, PartialLangiumServices } from 'langium';
import { TontoGeneratedModule, tontoGeneratedSharedModule } from './generated/module';
import { TontoValidationRegistry, TontoValidator } from './tonto-validator';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type TontoAddedServices = {
    validation: {
        TontoValidator: TontoValidator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type TontoServices = LangiumServices & TontoAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const TontoModule: Module<TontoServices, PartialLangiumServices & TontoAddedServices> = {
    references: {
        ScopeComputation: (services) => new TontoScopeComputation(services),
        NameProvider: () => new TontoNameProvider()
    },
    validation: {
        ValidationRegistry: (injector) => new TontoValidationRegistry(injector),
        TontoValidator: () => new TontoValidator()
    },
    index: {
        AstNodeDescriptionProvider: (services) => new TontoDescriptionProvider(services)
    }
};

/**
 * Inject the full set of language services by merging three modules:
 *  - Langium default services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 */
export function createTontoServices(context?: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    tonto: TontoServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        tontoGeneratedSharedModule
    );
    const tonto = inject(
        createDefaultModule({ shared }),
        TontoGeneratedModule,
        TontoModule
    );
    shared.ServiceRegistry.register(tonto);
    return { shared, tonto };
}

